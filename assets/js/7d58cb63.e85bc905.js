"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[439],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),g=a,y=d["".concat(l,".").concat(g)]||d[g]||c[g]||s;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={},o="WordPress Integration",i={unversionedId:"integrations/wordpress",id:"integrations/wordpress",title:"WordPress Integration",description:"The WordPress integration makes it possible to index content on a WordPress website onto your own site.",source:"@site/docs/integrations/wordpress.md",sourceDirName:"integrations",slug:"/integrations/wordpress",permalink:"/integrations/wordpress",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Integrations",permalink:"/integrations/"},next:{title:"Content Models",permalink:"/models/content-models/"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wordpress-integration"},"WordPress Integration"),(0,a.kt)("p",null,"The WordPress integration makes it possible to index content on a WordPress website onto your own site."),(0,a.kt)("mark",null,"NOTE: THIS IS STILL IN DEVELOPMENT. THE DOCUMENTATION BELOW SHOWS HOW THIS IS EXPECTED TO BE USED."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/adiungo/integrations-wordpress"},"Repository"))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"composer require adiungo/integrations-wordpress\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"This integration provides factory class that you can use on your platform to index the content on the site. Let's assume\nthat you're creating a WordPress plugin that can fetch posts from ",(0,a.kt)("em",{parentName:"p"},"other")," WordPress websites."),(0,a.kt)("p",null,"First, we must give the REST integration a way to actually ",(0,a.kt)("em",{parentName:"p"},"fetch")," the data. Adiungo does not come with a way to\nactually make REST requests. This is the platform's responsibility, and as a result you would need to have\nan ",(0,a.kt)("inlineCode",{parentName:"p"},"Http_Strategy")," class similar to this in your own plugin. We'll use this one later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"use Adiungo\\Core\\Abstracts\\Http_Strategy;\n\n// This is needed for REST, so it knows how to make requests.\nclass WordPress_Http_Strategy extends Http_Strategy\n{\n\n    /**\n     * Uses the provided request to make a wp_remote_* request.\n     * Returns the response body, as a string.\n     *\n     * @return string\n     */\n    public function to_string(): string\n    {\n        // This would probably use the WordPress Requests class to get the body. https://developer.wordpress.org/reference/classes/requests/\n    }\n\n    public function __toString()\n    {\n        return $this->to_string();\n    }\n}\n")),(0,a.kt)("p",null,"Okay, now that we have created a class that describes how to actually fetch data via REST, let's go ahead and use\nthe ",(0,a.kt)("a",{parentName:"p",href:"/integrations/wordpress"},"WordPress integration"),". In this case, we can use the WordPress\nintegration's ",(0,a.kt)("inlineCode",{parentName:"p"},"WordPress_Rest_Strategy_Factory")," class to do build most of the rest strategy for us. All we need to do is\nprovide it with our HTTP strategy, and it's ready to go."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$factory = (new WordPress_Rest_Strategy_Factory())->set_http_strategy(new WordPress_Http_Strategy());\n")),(0,a.kt)("p",null,"Once that's done, you can use your factory to build as many ",(0,a.kt)("a",{parentName:"p",href:"/index-strategies"},"index strategies")," as you need. Each\nstrategy is associated with a different URL used to make the REST request,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"use Underpin\\Factories\\Url;\n\n// First, Create our actual Index Strategy.\n$factory = (new WordPress_Rest_Strategy_Factory())->set_http_strategy(new WordPress_Http_Strategy());\n\n// Now, specify the REST URL. This should include any filters that provides the necessary specificity to ensure you don't get content that isn't yours.\n$url = Url::from('https://blog.example.org/wp-json/wp/v2/posts?author=1');\n\n// Use that URL in your strategy.\n$strategy = $factory->build($url, new DateTime());\n")),(0,a.kt)("p",null,"You now have a fully-formed Index Strategy, and as long as you have your model save events registered, can do things\nlike this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// Index all the things. This would continually fetch the data from the strategy, and index it until there's nothing left to fetch.\nwhile ($strategy->get_data_source()->has_more()) {\n    $strategy->index_data();\n}\n\n// Index a specific record.\n$strategy->index_item(123);\n")))}c.isMDXComponent=!0}}]);