"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[63],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},s="CSV",i={unversionedId:"data-sources/csv",id:"data-sources/csv",title:"CSV",description:"The CSV data source makes it possible to convert a functioning CSV string into a ContentModelCollection.",source:"@site/docs/data-sources/csv.md",sourceDirName:"data-sources",slug:"/data-sources/csv",permalink:"/data-sources/csv",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Data Sources",permalink:"/data-sources/"},next:{title:"Attachments",permalink:"/collections/attachments"}},l={},c=[{value:"Usage",id:"usage",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"csv"},"CSV"),(0,o.kt)("p",null,"The CSV data source makes it possible to convert a functioning CSV string into a ",(0,o.kt)("inlineCode",{parentName:"p"},"Content_Model_Collection"),"."),(0,o.kt)("p",null,"Generally speaking a CSV import process looks like this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Upload a CSV file onto the site, and specify the content type"),(0,o.kt)("li",{parentName:"ol"},"Map the CSV columns to the different fields in a model"),(0,o.kt)("li",{parentName:"ol"},"Data gets imported in batches based on the size of the CSV.")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Let's say we have this model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"final class Sample_Model extends Content_Model implements Has_Name, Has_Content, Identifiable_Int\n{\n    use With_Content;\n    use With_Name;\n    use With_Int_Identity;\n}\n")),(0,o.kt)("p",null,"We can then use that model, map it to our CSV columns, and import it like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$source = (new CSV_Data_Source())\n    // Set the model that this will set\n    ->set_content_model_instance(Sample_Model::class)\n    // Map each column in our CSV to the different setters in our model\n    ->map_column('content', 'set_content', Types::String)\n    ->map_column('name', 'set_name', Types::String)\n    ->map_column('id', 'set_id', Types::Integer)\n    // Optionally set the offset\n    ->set_offset(1)\n    // Optionally set the limit, which is the number of items to process in this batch.\n    ->set_limit(1)\n    // Sets the actual CSV string.\n    ->set_csv(\"id,content,name\\r1,\\\"the content\\\",alex\\r2,\\\"more content\\\",stephen\\r3,\\\"another content\\\",kate\\r4,\\\"even more content\\\",kara\");\n")),(0,o.kt)("p",null,"Once your source is built, you can run the methods detailed in the ",(0,o.kt)("a",{parentName:"p",href:"/data-sources"},"data sources")," page to loop through, and access items in this CSV."))}u.isMDXComponent=!0}}]);