"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[456],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8792:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={},o="Rest",l={unversionedId:"data-sources/rest",id:"data-sources/rest",title:"Rest",description:"The REST data source makes it possible to convert a REST request into a ContentModelCollection.",source:"@site/docs/data-sources/rest.md",sourceDirName:"data-sources",slug:"/data-sources/rest",permalink:"/data-sources/rest",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CSV",permalink:"/data-sources/csv"},next:{title:"Attachments",permalink:"/collections/attachments"}},i={},c=[{value:"Usage",id:"usage",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rest"},"Rest"),(0,r.kt)("p",null,"The REST data source makes it possible to convert a REST request into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Content_Model_Collection"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Let's say we have this model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"final class Sample_Model extends Content_Model implements Has_Name, Has_Content, Identifiable_Int\n{\n    use With_Content;\n    use With_Name;\n    use With_Int_Identity;\n}\n")),(0,r.kt)("p",null,"We can import data with this model using a REST endpoint with the REST data source. To do this, we have to create\nseveral classes that ultimately assemble our data source. A good example of how to implement this can be seen\nin ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/adiungo/core/blob/main/tests/Integration/Rest_Data_Source_Test.php"},"this set of integration tests"),"."),(0,r.kt)("p",null,"These strategies include:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a data source adapter.")," This defines how to convert the REST object into a content model."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a batch request builder.")," This builds the request for batch requests, and handles any arguments needed to get the next batch."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a content model instance.")," This is the class string for the content model that should be used to build the items\nin the collection. Using the example above, this would be ",(0,r.kt)("inlineCode",{parentName:"li"},"Sample_Model::class")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a has more strategy.")," This determines if there are more items in a batch request."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a http strategy.")," This actually makes the HTTP request and gets the body."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a single request builder.")," This builds the request for fetching a single post."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"a batch response adapter.")," This gets the raw array of data from a batch response")),(0,r.kt)("p",null,"Example pulled from the test. In practice, this would probably be in a builder, but Adiungo doesn't enforce how you do this.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$source = (new Rest())\n    ->set_data_source_adapter(new Test_Data_Source_Adapter())\n    ->set_batch_request_builder(new Batch_Request_Builder())\n    ->set_content_model_instance(Test_Model::class)\n    ->set_has_more_strategy(new Has_More_Strategy_Mock())\n    ->set_http_strategy(new Http_Strategy_Mock())\n    ->set_single_request_builder(new Single_Request_Builder())\n    ->set_batch_response_adapter(new Batch_Response_Adapter_Mock());\n")),(0,r.kt)("p",null,"Once you have your source compiled, you can fetch the data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// Create a request object, and attach it to the batch request builder.\n$request = (new Request())\n    ->set_url(Url::from('https://example.org/batch'))\n    ->set_method(Method::Get)\n    ->set_param((new Param('page', Types::Integer))->set_value(1));\n\n$source->get_batch_request_builder()->set_request($request);\n\n// Now get the batch of data, as a content model collection of Sample_Model.\n$source->get_data()\n")),(0,r.kt)("p",null,"You can also fetch a single item in a similar fashion. Note that the difference here is the request and we're also\ncalling ",(0,r.kt)("inlineCode",{parentName:"p"},"get_single_request_builder")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"get_batch_request_builder"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// Create a request object, and attach it to the single request builder.\n$request = (new Request())\n    ->set_url(Url::from('https://example.org/single'))\n    ->set_method(Method::Get)\n\n$source->get_single_request_builder()->set_request($request);\n\n// Now, get the item \n$id = 123;\n$request->get_item($id);\n")))}p.isMDXComponent=!0}}]);