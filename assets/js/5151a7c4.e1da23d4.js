"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[125],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=h(a),m=i,u=c["".concat(l,".").concat(m)]||c[m]||p[m]||s;return a?n.createElement(u,r(r({ref:t},d),{},{components:a})):n.createElement(u,r({ref:t},d))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var h=2;h<s;h++)r[h]=a[h];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3295:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var n=a(7462),i=(a(7294),a(3905));const s={},r="Implementers",o={unversionedId:"implementers",id:"implementers",title:"Implementers",description:"Many items in Adiungo eschew relying on the constructor, in-favor of",source:"@site/docs/implementers.md",sourceDirName:".",slug:"/implementers",permalink:"/implementers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Tags",permalink:"/collections/tags"},next:{title:"Index Strategies",permalink:"/index-strategies/"}},l={},h=[{value:"Example - A model with a title, and content",id:"example---a-model-with-a-title-and-content",level:2},{value:"List of Existing Properties",id:"list-of-existing-properties",level:2},{value:"Has_Attachments, With_Attachments",id:"has_attachments-with_attachments",level:3},{value:"Has_Author, With_Author",id:"has_author-with_author",level:3},{value:"Has_Categories, With_Categories",id:"has_categories-with_categories",level:3},{value:"Has_Content, With_Content",id:"has_content-with_content",level:3},{value:"Has_Data_Source, With_Data_Source",id:"has_data_source-with_data_source",level:3},{value:"Has_Excerpt, With_Excerpt",id:"has_excerpt-with_excerpt",level:3},{value:"Has_Index_Strategy, With_Index_Strategy",id:"has_index_strategy-with_index_strategy",level:3},{value:"Has_Location, With_Location",id:"has_location-with_location",level:3},{value:"Has_Name, With_Name",id:"has_name-with_name",level:3},{value:"Has_Origin, With_Origin",id:"has_origin-with_origin",level:3},{value:"Has_Published_Date, With_Published_Date",id:"has_published_date-with_published_date",level:3},{value:"Has_Tags",id:"has_tags",level:3},{value:"Has_Updated_Date, With_Updated_Date",id:"has_updated_date-with_updated_date",level:3}],d={toc:h};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"implementers"},"Implementers"),(0,i.kt)("p",null,"Many items in Adiungo eschew relying on the constructor, in-favor of\na ",(0,i.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/builder"},"builder pattern"),", with fluent-style setters and getters to build\nsomething. This makes it possible to set various properties on something when-necessary, and always ensure the property\nis type-safe."),(0,i.kt)("p",null,"A side effect of this approach is the potential for code-duplication, where you find yourself writing the same setter,\nand getter in multiple places. Different classes, with entirely different purposes, can require the same setter and\ngetter. Consider ",(0,i.kt)("inlineCode",{parentName:"p"},"get_title"),"and ",(0,i.kt)("inlineCode",{parentName:"p"},"set_title"),", for example. These setters/getters could mean something very different\ndepending on what kind of model they're in. A blog post title, and a person's title, mean different things, but\nprogrammatically speaking they're both strings."),(0,i.kt)("p",null,"To work around this, Adiungo creates setters and getters using a combination of a\nPHP ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.oop5.traits.php"},"trait"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.oop5.interfaces.php"},"interface"),", called implementers. It follows a pattern,\nwhere the interface is ",(0,i.kt)("inlineCode",{parentName:"p"},"Has_{name}")," and the trait is ",(0,i.kt)("inlineCode",{parentName:"p"},"With_{name}"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"{name}")," is the name of the property that is\nbeing implemented."),(0,i.kt)("h2",{id:"example---a-model-with-a-title-and-content"},"Example - A model with a title, and content"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class Blog_Post extends Content_Model implements Has_Title, Has_Content{\n  use With_Title;\n  use With_Content;\n}\n\n// The setters and getters are provided by the interface/trait combos.\n$post = (new Blog_Post())->set_title('hello world!')->set_content('This is my first blog post.');\n\necho $post->get_title() . ' ' . $post->get_content(); // hello world! This is my first blog post.\n\n// This also makes it possible to validate content in cases where you aren't sure if something will have a property\nif($post instanceof Has_Excerpt){\n  echo $post->get_excerpt();\n}\n")),(0,i.kt)("p",null,"This approach has several benefits:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You don't need to write unit tests for the setters and getters."),(0,i.kt)("li",{parentName:"ol"},"Creating a new model is usually as simple as implementing interfaces, and using the corresponding traits."),(0,i.kt)("li",{parentName:"ol"},"You can confirm that something can actually use the methods you intend to use with ",(0,i.kt)("inlineCode",{parentName:"li"},"instanceof")),(0,i.kt)("li",{parentName:"ol"},"This approach avoids pitfalls that come from inheritance-based approaches, and uses compilation instead. You ",(0,i.kt)("em",{parentName:"li"},"can"),"\nstill use inheritance, but this approach keeps it as shallow as possible.")),(0,i.kt)("h2",{id:"list-of-existing-properties"},"List of Existing Properties"),(0,i.kt)("h3",{id:"has_attachments-with_attachments"},"Has_Attachments, With_Attachments"),(0,i.kt)("p",null,"Used to describe something that can have ",(0,i.kt)("a",{parentName:"p",href:"/collections/attachments"},"attachments"),". Provides a way to get a collection of attachments, add\nattachments, and remove attachments, and a check to see if the model has any attachments at all."),(0,i.kt)("h3",{id:"has_author-with_author"},"Has_Author, With_Author"),(0,i.kt)("p",null,"Used to describe something that can have an author name, as a string."),(0,i.kt)("h3",{id:"has_categories-with_categories"},"Has_Categories, With_Categories"),(0,i.kt)("p",null,"Used to describe something that can have ",(0,i.kt)("a",{parentName:"p",href:"/collections/categories"},"categories"),". Provides a way to get a collection of categories, add\ncategories, and remove categories, and a check to see if the model has any categories at all."),(0,i.kt)("h3",{id:"has_content-with_content"},"Has_Content, With_Content"),(0,i.kt)("p",null,"Used to describe something that can have content, as a string."),(0,i.kt)("h3",{id:"has_data_source-with_data_source"},"Has_Data_Source, With_Data_Source"),(0,i.kt)("p",null,"Used to describe something that can have a ",(0,i.kt)("a",{parentName:"p",href:"/data-sources"},"data source"),"."),(0,i.kt)("h3",{id:"has_excerpt-with_excerpt"},"Has_Excerpt, With_Excerpt"),(0,i.kt)("p",null,"Used to describe something that can have an excerpt, as a string."),(0,i.kt)("h3",{id:"has_index_strategy-with_index_strategy"},"Has_Index_Strategy, With_Index_Strategy"),(0,i.kt)("p",null,"Used to describe something that can have an ",(0,i.kt)("a",{parentName:"p",href:"/index-strategies"},"index strategy"),"."),(0,i.kt)("h3",{id:"has_location-with_location"},"Has_Location, With_Location"),(0,i.kt)("p",null,"Used to describe something that has a ",(0,i.kt)("a",{parentName:"p",href:"/models/location"},"location"),"."),(0,i.kt)("h3",{id:"has_name-with_name"},"Has_Name, With_Name"),(0,i.kt)("p",null,"Used to describe something that has a name, as a string."),(0,i.kt)("h3",{id:"has_origin-with_origin"},"Has_Origin, With_Origin"),(0,i.kt)("p",null,"Used to describe something that has an original location, as an Underpin ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," object."),(0,i.kt)("h3",{id:"has_published_date-with_published_date"},"Has_Published_Date, With_Published_Date"),(0,i.kt)("p",null,"Used to describe something that has a published date, as a ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime"),"."),(0,i.kt)("h3",{id:"has_tags"},"Has_Tags"),(0,i.kt)("p",null,"Used to describe something that can have ",(0,i.kt)("a",{parentName:"p",href:"/collections/tags"},"tags"),". Provides a way to get a collection of tags, add\ntags, and remove tags, and a check to see if the model has any tags at all."),(0,i.kt)("h3",{id:"has_updated_date-with_updated_date"},"Has_Updated_Date, With_Updated_Date"),(0,i.kt)("p",null,"Used to describe something that has a updated date, as a ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime"),"."))}p.isMDXComponent=!0}}]);